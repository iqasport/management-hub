generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model active_storage_attachments {
  uuid                 String               @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                   BigInt               @id @default(autoincrement())
  name                 String               @db.VarChar
  record_type          String               @db.VarChar
  record_id            BigInt
  blob_id              BigInt
  created_at           DateTime             @db.Timestamp(6)
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3b3935057")

  @@unique([record_type, record_id, name, blob_id], map: "index_active_storage_attachments_uniqueness")
  @@index([blob_id], map: "index_active_storage_attachments_on_blob_id")
}

model active_storage_blobs {
  uuid                       String                       @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                         BigInt                       @id @default(autoincrement())
  key                        String                       @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename                   String                       @db.VarChar
  content_type               String?                      @db.VarChar
  metadata                   String?
  byte_size                  BigInt
  checksum                   String                       @db.VarChar
  created_at                 DateTime                     @db.Timestamp(6)
  active_storage_attachments active_storage_attachments[]
}

model answers {
  uuid          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id            BigInt   @unique @default(autoincrement())
  question_uuid String?  @db.Uuid
  description   String
  correct       Boolean  @default(false)
  created_at    DateTime @db.Timestamp(6)
  updated_at    DateTime @db.Timestamp(6)

  questions questions? @relation(fields: [question_uuid], references: [uuid])

  referee_answers referee_answers[]

  @@index([question_uuid])
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model certification_payments {
  uuid               String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                 BigInt   @id @default(autoincrement())
  user_uuid          String   @db.Uuid
  certification_uuid String?  @db.Uuid
  stripe_session_id  String   @db.VarChar
  created_at         DateTime @db.Timestamp(6)
  updated_at         DateTime @db.Timestamp(6)

  users          users?          @relation(fields: [user_uuid], references: [uuid])
  certifications certifications? @relation(fields: [certification_uuid], references: [uuid])

  @@index([certification_uuid])
}

model certifications {
  uuid         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id           BigInt   @unique @default(autoincrement())
  level        Int
  display_name String   @default("") @db.VarChar
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)
  version      Int?     @default(0)


  certification_payments certification_payments[]
  referee_certifications referee_certifications[]
  tests                  tests[]
  @@unique([level, version], map: "index_certifications_on_level_and_version")
}

model data_migrations {
  version String @id @db.VarChar
}

model exported_csvs {
  uuid           String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id             BigInt    @id @default(autoincrement())
  type           String?   @db.VarChar
  user_uuid      String    @db.Uuid
  url            String?   @db.VarChar
  processed_at   DateTime? @db.Timestamp(6)
  sent_at        DateTime? @db.Timestamp(6)
  export_options Json      @default("{}") @db.Json
  created_at     DateTime  @db.Timestamp(6)
  updated_at     DateTime  @db.Timestamp(6)
  users          users?    @relation(fields: [user_uuid], references: [uuid])

  @@index([user_uuid])
}

model flipper_features {
  uuid       String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id         BigInt   @id @default(autoincrement())
  key        String   @unique(map: "index_flipper_features_on_key") @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model flipper_gates {
  uuid        String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id          BigInt   @id @default(autoincrement())
  feature_key String   @db.VarChar
  key         String   @db.VarChar
  value       String?  @db.VarChar
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  @@unique([feature_key, key, value], map: "index_flipper_gates_on_feature_key_and_key_and_value")
}

model languages {
  uuid         String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id           BigInt   @id @default(autoincrement())
  long_name    String   @default("english") @db.VarChar
  short_name   String   @default("en") @db.VarChar
  long_region  String?  @db.VarChar
  short_region String?  @db.VarChar
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)
}

model national_governing_bodies {
  uuid              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                BigInt   @unique @default(autoincrement())
  name              String   @db.VarChar
  website           String?  @db.VarChar
  created_at        DateTime @db.Timestamp(6)
  updated_at        DateTime @db.Timestamp(6)
  player_count      Int      @default(0)
  image_url         String?  @db.VarChar
  country           String?  @db.VarChar
  acronym           String?  @db.VarChar
  region            Int?
  membership_status Int      @default(0)

  national_governing_body_admins national_governing_body_admins[]
  national_governing_body_stats  national_governing_body_stats[]
  teams                          teams[]
  referee_locations              referee_locations[]

  @@index([region], map: "index_national_governing_bodies_on_region")
}

model national_governing_body_admins {
  uuid                         String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                           BigInt   @id @default(autoincrement())
  user_uuid                    String   @db.Uuid
  national_governing_body_uuid String?  @db.Uuid
  created_at                   DateTime @db.Timestamp(6)
  updated_at                   DateTime @db.Timestamp(6)

  national_governing_bodies national_governing_bodies? @relation(fields: [national_governing_body_uuid], references: [uuid])
  users                     users                      @relation(fields: [user_uuid], references: [uuid])

  @@index([user_uuid])
  @@index([national_governing_body_uuid])
}

model national_governing_body_stats {
  uuid                         String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                           BigInt    @id @default(autoincrement())
  national_governing_body_uuid String?   @db.Uuid
  total_referees_count         Int?      @default(0)
  head_referees_count          Int?      @default(0)
  assistant_referees_count     Int?      @default(0)
  snitch_referees_count        Int?      @default(0)
  competitive_teams_count      Int?      @default(0)
  developing_teams_count       Int?      @default(0)
  inactive_teams_count         Int?      @default(0)
  youth_teams_count            Int?      @default(0)
  university_teams_count       Int?      @default(0)
  community_teams_count        Int?      @default(0)
  team_status_change_count     Int?      @default(0)
  created_at                   DateTime  @db.Timestamp(6)
  updated_at                   DateTime  @db.Timestamp(6)
  total_teams_count            Int?      @default(0)
  uncertified_count            Int?      @default(0)
  start                        DateTime? @db.Timestamp(6)
  end_time                     DateTime? @db.Timestamp(6)
  scorekeeper_referees_count   Int?      @default(0)

  national_governing_bodies national_governing_bodies? @relation(fields: [national_governing_body_uuid], references: [uuid])

  @@index([national_governing_body_uuid])
}

model policy_manager_portability_requests {
  uuid       String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id         BigInt    @id @default(autoincrement())
  user_uuid  String    @db.Uuid
  state      String?   @db.VarChar
  expire_at  DateTime? @db.Timestamp(6)
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  users      users     @relation(fields: [user_uuid], references: [uuid])

  @@index([user_uuid])
}

model policy_manager_terms {
  uuid        String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id          BigInt    @id @default(autoincrement())
  description String?
  rule        String?   @db.VarChar
  state       String?   @db.VarChar
  accepted_at DateTime? @db.Timestamp(6)
  rejected_at DateTime? @db.Timestamp(6)
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
}

model policy_manager_user_terms {
  uuid       String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id         BigInt   @id @default(autoincrement())
  user_uuid  String   @db.Uuid
  term_id    Int?
  term_uuid  String?  @db.Uuid
  state      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  users users? @relation(fields: [user_uuid], references: [uuid])
  @@index([state], map: "index_policy_manager_user_terms_on_state")
  @@index([term_id], map: "index_policy_manager_user_terms_on_term_id")
  @@index([user_uuid])
}

model questions {
  uuid             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id               BigInt   @unique @default(autoincrement())
  test_uuid        String?  @db.Uuid
  description      String
  points_available Int      @default(1)
  feedback         String?
  created_at       DateTime @db.Timestamp(6)
  updated_at       DateTime @db.Timestamp(6)

  tests tests? @relation(fields: [test_uuid], references: [uuid])

  answers         answers[]
  referee_answers referee_answers[]

  @@index([test_uuid])
}

model referee_answers {
  uuid            String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id              BigInt   @id @default(autoincrement())
  user_uuid       String   @db.Uuid
  test_uuid       String?  @db.Uuid
  question_uuid   String?  @db.Uuid
  answer_uuid     String?  @db.Uuid
  test_attempt_id BigInt
  created_at      DateTime @db.Timestamp(6)
  updated_at      DateTime @db.Timestamp(6)

  users     users?     @relation(fields: [user_uuid], references: [uuid])
  tests     tests?     @relation(fields: [test_uuid], references: [uuid])
  questions questions? @relation(fields: [question_uuid], references: [uuid])
  answers   answers?   @relation(fields: [answer_uuid], references: [uuid])

  @@index([test_attempt_id], map: "index_referee_answers_on_test_attempt_id")
  @@index([user_uuid])
  @@index([test_uuid])
  @@index([question_uuid])
  @@index([answer_uuid])
}

model referee_certifications {
  uuid               String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                 BigInt    @id @default(autoincrement())
  user_uuid          String    @db.Uuid
  certification_uuid String?   @db.Uuid
  received_at        DateTime? @db.Timestamp(6)
  revoked_at         DateTime? @db.Timestamp(6)
  renewed_at         DateTime? @db.Timestamp(6)
  created_at         DateTime  @db.Timestamp(6)
  updated_at         DateTime  @db.Timestamp(6)
  needs_renewal_at   DateTime? @db.Timestamp(6)

  certifications certifications? @relation(fields: [certification_uuid], references: [uuid])
  users          users?          @relation(fields: [user_uuid], references: [uuid])

  @@index([certification_uuid])
}

model referee_locations {
  uuid                         String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                           BigInt   @id @default(autoincrement())
  user_uuid                    String?  @db.Uuid
  national_governing_body_uuid String?  @db.Uuid
  created_at                   DateTime @db.Timestamp(6)
  updated_at                   DateTime @db.Timestamp(6)
  association_type             Int?     @default(0)

  national_governing_bodies national_governing_bodies? @relation(fields: [national_governing_body_uuid], references: [uuid])

  @@index([national_governing_body_uuid])
}

model referee_teams {
  uuid             String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id               BigInt   @id @default(autoincrement())
  team_uuid        String   @db.Uuid
  user_uuid        String   @db.Uuid
  association_type Int?     @default(0)
  created_at       DateTime @db.Timestamp(6)
  updated_at       DateTime @db.Timestamp(6)
  users            users?   @relation(fields: [user_uuid], references: [uuid])
  teams            teams?   @relation(fields: [team_uuid], references: [uuid])

  @@index([team_uuid])
  @@index([user_uuid])
}

model roles {
  uuid        String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id          BigInt   @id @default(autoincrement())
  user_uuid   String   @db.Uuid
  access_type Int      @default(0)
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  users       users?   @relation(fields: [user_uuid], references: [uuid])

  @@index([user_uuid])
  @@index([user_uuid, access_type])
}

model schema_migrations {
  version String @id @db.VarChar
}

model social_accounts {
  uuid         String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id           BigInt   @id @default(autoincrement())
  ownable_type String?  @db.VarChar
  ownable_id   BigInt?
  url          String   @db.VarChar
  account_type Int      @default(0)
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)

  @@index([ownable_type, ownable_id], map: "index_social_accounts_on_ownable_type_and_ownable_id")
}

model team_status_changesets {
  uuid            String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id              BigInt   @id @default(autoincrement())
  team_uuid       String   @db.Uuid
  previous_status String?  @db.VarChar
  new_status      String?  @db.VarChar
  created_at      DateTime @db.Timestamp(6)
  updated_at      DateTime @db.Timestamp(6)
  teams           teams?   @relation(fields: [team_uuid], references: [uuid])

  @@index([team_uuid])
}

model teams {
  uuid                         String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                         String    @db.VarChar
  city                         String    @db.VarChar
  state                        String?   @db.VarChar
  country                      String    @db.VarChar
  status                       Int?      @default(0)
  group_affiliation            Int?      @default(0)
  national_governing_body_uuid String?   @db.Uuid
  created_at                   DateTime  @db.Timestamp(6)
  updated_at                   DateTime  @db.Timestamp(6)
  joined_at                    DateTime? @default(now()) @db.Timestamp(6)

  national_governing_bodies national_governing_bodies? @relation(fields: [national_governing_body_uuid], references: [uuid])

  referee_teams          referee_teams[]
  team_status_changesets team_status_changesets[]

  @@index([national_governing_body_uuid])
}

model test_attempts {
  uuid            String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id              BigInt    @id @default(autoincrement())
  test_uuid       String?   @db.Uuid
  user_uuid       String    @db.Uuid
  test_level      Int?
  next_attempt_at DateTime? @db.Timestamp(6)
  created_at      DateTime  @db.Timestamp(6)
  updated_at      DateTime  @db.Timestamp(6)
  users           users?    @relation(fields: [user_uuid], references: [uuid])
  tests           tests?    @relation(fields: [test_uuid], references: [uuid])

  @@index([user_uuid])
  @@index([test_uuid])
}

model test_results {
  uuid                    String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                      BigInt    @id @default(autoincrement())
  user_uuid               String    @db.Uuid
  time_started            DateTime? @db.Time(6)
  time_finished           DateTime? @db.Time(6)
  duration                String?   @db.VarChar
  percentage              Int?
  points_scored           Int?
  points_available        Int?
  passed                  Boolean?
  certificate_url         String?   @db.VarChar
  minimum_pass_percentage Int?
  created_at              DateTime  @db.Timestamp(6)
  updated_at              DateTime  @db.Timestamp(6)
  test_level              Int?      @default(0)
  test_uuid               String?   @db.Uuid
  users                   users?    @relation(fields: [user_uuid], references: [uuid])
  tests                   tests?    @relation(fields: [test_uuid], references: [uuid])

  @@index([test_uuid])
  @@index([user_uuid])
}

model tests {
  uuid                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                      BigInt   @unique @default(autoincrement())
  level                   Int?     @default(0)
  name                    String?  @db.VarChar
  certification_uuid      String?  @db.Uuid
  created_at              DateTime @db.Timestamp(6)
  updated_at              DateTime @db.Timestamp(6)
  description             String
  time_limit              Int      @default(18)
  minimum_pass_percentage Int      @default(80)
  positive_feedback       String?
  negative_feedback       String?
  language                String?  @db.VarChar
  active                  Boolean  @default(false)
  testable_question_count Int      @default(0)
  recertification         Boolean? @default(false)
  new_language_id         Int?
  language_uuid           String?  @db.Uuid

  certifications certifications? @relation(fields: [certification_uuid], references: [uuid])

  questions       questions[]
  referee_answers referee_answers[]
  test_attempts   test_attempts[]
  test_results    test_results[]

  @@index([certification_uuid])
}

model users {
  uuid                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id                     BigInt    @unique @default(autoincrement())
  email                  String    @unique(map: "index_users_on_email") @default("") @db.VarChar
  encrypted_password     String    @default("") @db.VarChar
  reset_password_token   String?   @unique(map: "index_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at DateTime? @db.Timestamp(6)
  remember_created_at    DateTime? @db.Timestamp(6)
  sign_in_count          Int       @default(0)
  current_sign_in_at     DateTime? @db.Timestamp(6)
  last_sign_in_at        DateTime? @db.Timestamp(6)
  current_sign_in_ip     String?   @db.Inet
  last_sign_in_ip        String?   @db.Inet
  first_name             String?   @db.VarChar
  last_name              String?   @db.VarChar
  bio                    String?
  pronouns               String?   @db.VarChar
  show_pronouns          Boolean?  @default(false)
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime  @db.Timestamp(6)
  submitted_payment_at   DateTime? @db.Timestamp(6)
  admin                  Boolean?  @default(false)
  confirmation_token     String?   @unique(map: "index_users_on_confirmation_token") @db.VarChar
  confirmed_at           DateTime? @db.Timestamp(6)
  confirmation_sent_at   DateTime? @db.Timestamp(6)
  failed_attempts        Int       @default(0)
  unlock_token           String?   @unique(map: "index_users_on_unlock_token") @db.VarChar
  locked_at              DateTime? @db.Timestamp(6)
  invitation_token       String?   @unique(map: "index_users_on_invitation_token") @db.VarChar
  invitation_created_at  DateTime? @db.Timestamp(6)
  invitation_sent_at     DateTime? @db.Timestamp(6)
  invitation_accepted_at DateTime? @db.Timestamp(6)
  invitation_limit       Int?
  invited_by_type        String?   @db.VarChar
  invited_by_id          BigInt?
  invitations_count      Int?      @default(0)
  export_name            Boolean?  @default(true)
  stripe_customer_id     String?   @db.VarChar
  language_id            Int?
  language_uuid          String?   @db.Uuid

  national_governing_body_admins      national_governing_body_admins[]
  referee_teams                       referee_teams[]
  roles                               roles[]
  referee_answers                     referee_answers[]
  test_results                        test_results[]
  referee_certifications              referee_certifications[]
  certification_payments              certification_payments[]
  exported_csvs                       exported_csvs[]
  policy_manager_user_terms           policy_manager_user_terms[]
  test_attempts                       test_attempts[]
  policy_manager_portability_requests policy_manager_portability_requests[]

  @@index([invitations_count], map: "index_users_on_invitations_count")
  @@index([invited_by_id], map: "index_users_on_invited_by_id")
  @@index([invited_by_type, invited_by_id], map: "index_users_on_invited_by_type_and_invited_by_id")
}
